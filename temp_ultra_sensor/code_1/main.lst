CCS PCM C Compiler, Version 5.008, 5967               18-Sep-24 16:13

               Filename:   D:\hackathon\Project_1\temp_ultra_sensor\code_1\main.lst

               ROM used:   1477 words (18%)
                           Largest free fragment is 2048
               RAM used:   12 (3%) at main() level
                           37 (10%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  05
0001:  MOVWF  0A
0002:  GOTO   55A
0003:  NOP
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA D4,32
000D:  DATA 6D,38
000E:  DATA 3A,10
000F:  DATA 25,17
0010:  DATA 31,33
0011:  DATA 43,00
0012:  DATA C4,34
0013:  DATA 73,3A
0014:  DATA 3A,10
0015:  DATA A5,3A
0016:  DATA E3,36
0017:  DATA 00,16
*
0122:  MOVF   33,W
0123:  BTFSC  03.2
0124:  GOTO   192
0125:  MOVWF  3B
0126:  MOVF   37,W
0127:  BTFSC  03.2
0128:  GOTO   192
0129:  ADDWF  3B,F
012A:  BTFSC  03.0
012B:  GOTO   133
012C:  MOVLW  7F
012D:  SUBWF  3B,F
012E:  BTFSS  03.0
012F:  GOTO   192
0130:  BTFSC  03.2
0131:  GOTO   192
0132:  GOTO   137
0133:  MOVLW  81
0134:  ADDWF  3B,F
0135:  BTFSC  03.0
0136:  GOTO   192
0137:  MOVF   3B,W
0138:  MOVWF  77
0139:  CLRF   78
013A:  CLRF   79
013B:  CLRF   7A
013C:  MOVF   34,W
013D:  MOVWF  3F
013E:  BSF    3F.7
013F:  MOVF   35,W
0140:  MOVWF  3E
0141:  MOVF   36,W
0142:  MOVWF  3D
0143:  MOVLW  18
0144:  MOVWF  3B
0145:  CLRF   3C
0146:  BTFSS  3D.0
0147:  GOTO   160
0148:  MOVF   3A,W
0149:  ADDWF  7A,F
014A:  BTFSS  03.0
014B:  GOTO   152
014C:  INCF   79,F
014D:  BTFSS  03.2
014E:  GOTO   152
014F:  INCF   78,F
0150:  BTFSC  03.2
0151:  BSF    3C.7
0152:  MOVF   39,W
0153:  ADDWF  79,F
0154:  BTFSS  03.0
0155:  GOTO   159
0156:  INCF   78,F
0157:  BTFSC  03.2
0158:  BSF    3C.7
0159:  MOVF   38,W
015A:  MOVWF  35
015B:  BSF    35.7
015C:  MOVF   35,W
015D:  ADDWF  78,F
015E:  BTFSC  03.0
015F:  BSF    3C.7
0160:  RLF    3C,F
0161:  RRF    78,F
0162:  RRF    79,F
0163:  RRF    7A,F
0164:  RRF    3F,F
0165:  RRF    3E,F
0166:  RRF    3D,F
0167:  BCF    03.0
0168:  DECFSZ 3B,F
0169:  GOTO   145
016A:  MOVLW  01
016B:  ADDWF  77,F
016C:  BTFSC  03.0
016D:  GOTO   192
016E:  BTFSC  78.7
016F:  GOTO   177
0170:  RLF    3F,F
0171:  RLF    7A,F
0172:  RLF    79,F
0173:  RLF    78,F
0174:  DECF   77,F
0175:  BTFSC  03.2
0176:  GOTO   192
0177:  BTFSS  3F.7
0178:  GOTO   188
0179:  INCF   7A,F
017A:  BTFSS  03.2
017B:  GOTO   188
017C:  INCF   79,F
017D:  BTFSS  03.2
017E:  GOTO   188
017F:  INCF   78,F
0180:  BTFSS  03.2
0181:  GOTO   188
0182:  RRF    78,F
0183:  RRF    79,F
0184:  RRF    7A,F
0185:  INCF   77,F
0186:  BTFSC  03.2
0187:  GOTO   192
0188:  MOVF   34,W
0189:  MOVWF  3C
018A:  MOVF   38,W
018B:  XORWF  3C,F
018C:  BTFSS  3C.7
018D:  GOTO   190
018E:  BSF    78.7
018F:  GOTO   196
0190:  BCF    78.7
0191:  GOTO   196
0192:  CLRF   77
0193:  CLRF   78
0194:  CLRF   79
0195:  CLRF   7A
0196:  RETURN
*
01AF:  MOVLW  8E
01B0:  MOVWF  77
01B1:  MOVF   2D,W
01B2:  MOVWF  78
01B3:  MOVF   2C,W
01B4:  MOVWF  79
01B5:  CLRF   7A
01B6:  MOVF   78,F
01B7:  BTFSS  03.2
01B8:  GOTO   1C3
01B9:  MOVF   79,W
01BA:  MOVWF  78
01BB:  CLRF   79
01BC:  MOVLW  08
01BD:  SUBWF  77,F
01BE:  MOVF   78,F
01BF:  BTFSS  03.2
01C0:  GOTO   1C3
01C1:  CLRF   77
01C2:  GOTO   1CB
01C3:  BCF    03.0
01C4:  BTFSC  78.7
01C5:  GOTO   1CA
01C6:  RLF    79,F
01C7:  RLF    78,F
01C8:  DECF   77,F
01C9:  GOTO   1C3
01CA:  BCF    78.7
*
0206:  MOVF   30,W
0207:  BTFSC  03.2
0208:  GOTO   2CB
0209:  MOVWF  3C
020A:  MOVF   34,W
020B:  BTFSC  03.2
020C:  GOTO   2CB
020D:  SUBWF  3C,F
020E:  BTFSS  03.0
020F:  GOTO   215
0210:  MOVLW  7F
0211:  ADDWF  3C,F
0212:  BTFSC  03.0
0213:  GOTO   2CB
0214:  GOTO   21B
0215:  MOVLW  81
0216:  SUBWF  3C,F
0217:  BTFSS  03.0
0218:  GOTO   2CB
0219:  BTFSC  03.2
021A:  GOTO   2CB
021B:  MOVF   3C,W
021C:  MOVWF  77
021D:  CLRF   78
021E:  CLRF   79
021F:  CLRF   7A
0220:  CLRF   3B
0221:  MOVF   31,W
0222:  MOVWF  3A
0223:  BSF    3A.7
0224:  MOVF   32,W
0225:  MOVWF  39
0226:  MOVF   33,W
0227:  MOVWF  38
0228:  MOVLW  19
0229:  MOVWF  3C
022A:  MOVF   37,W
022B:  SUBWF  38,F
022C:  BTFSC  03.0
022D:  GOTO   23E
022E:  MOVLW  01
022F:  SUBWF  39,F
0230:  BTFSC  03.0
0231:  GOTO   23E
0232:  SUBWF  3A,F
0233:  BTFSC  03.0
0234:  GOTO   23E
0235:  SUBWF  3B,F
0236:  BTFSC  03.0
0237:  GOTO   23E
0238:  INCF   3B,F
0239:  INCF   3A,F
023A:  INCF   39,F
023B:  MOVF   37,W
023C:  ADDWF  38,F
023D:  GOTO   270
023E:  MOVF   36,W
023F:  SUBWF  39,F
0240:  BTFSC  03.0
0241:  GOTO   259
0242:  MOVLW  01
0243:  SUBWF  3A,F
0244:  BTFSC  03.0
0245:  GOTO   259
0246:  SUBWF  3B,F
0247:  BTFSC  03.0
0248:  GOTO   259
0249:  INCF   3B,F
024A:  INCF   3A,F
024B:  MOVF   36,W
024C:  ADDWF  39,F
024D:  MOVF   37,W
024E:  ADDWF  38,F
024F:  BTFSS  03.0
0250:  GOTO   270
0251:  INCF   39,F
0252:  BTFSS  03.2
0253:  GOTO   270
0254:  INCF   3A,F
0255:  BTFSS  03.2
0256:  GOTO   270
0257:  INCF   3B,F
0258:  GOTO   270
0259:  MOVF   35,W
025A:  IORLW  80
025B:  SUBWF  3A,F
025C:  BTFSC  03.0
025D:  GOTO   26F
025E:  MOVLW  01
025F:  SUBWF  3B,F
0260:  BTFSC  03.0
0261:  GOTO   26F
0262:  INCF   3B,F
0263:  MOVF   35,W
0264:  IORLW  80
0265:  ADDWF  3A,F
0266:  MOVF   36,W
0267:  ADDWF  39,F
0268:  BTFSS  03.0
0269:  GOTO   24D
026A:  INCF   3A,F
026B:  BTFSS  03.2
026C:  GOTO   24D
026D:  INCF   3B,F
026E:  GOTO   24D
026F:  BSF    7A.0
0270:  DECFSZ 3C,F
0271:  GOTO   273
0272:  GOTO   27E
0273:  BCF    03.0
0274:  RLF    38,F
0275:  RLF    39,F
0276:  RLF    3A,F
0277:  RLF    3B,F
0278:  BCF    03.0
0279:  RLF    7A,F
027A:  RLF    79,F
027B:  RLF    78,F
027C:  RLF    3D,F
027D:  GOTO   22A
027E:  BTFSS  3D.0
027F:  GOTO   286
0280:  BCF    03.0
0281:  RRF    78,F
0282:  RRF    79,F
0283:  RRF    7A,F
0284:  RRF    3D,F
0285:  GOTO   289
0286:  DECF   77,F
0287:  BTFSC  03.2
0288:  GOTO   2CB
0289:  BTFSC  3D.7
028A:  GOTO   2B2
028B:  BCF    03.0
028C:  RLF    38,F
028D:  RLF    39,F
028E:  RLF    3A,F
028F:  RLF    3B,F
0290:  MOVF   37,W
0291:  SUBWF  38,F
0292:  BTFSC  03.0
0293:  GOTO   29E
0294:  MOVLW  01
0295:  SUBWF  39,F
0296:  BTFSC  03.0
0297:  GOTO   29E
0298:  SUBWF  3A,F
0299:  BTFSC  03.0
029A:  GOTO   29E
029B:  SUBWF  3B,F
029C:  BTFSS  03.0
029D:  GOTO   2C1
029E:  MOVF   36,W
029F:  SUBWF  39,F
02A0:  BTFSC  03.0
02A1:  GOTO   2A9
02A2:  MOVLW  01
02A3:  SUBWF  3A,F
02A4:  BTFSC  03.0
02A5:  GOTO   2A9
02A6:  SUBWF  3B,F
02A7:  BTFSS  03.0
02A8:  GOTO   2C1
02A9:  MOVF   35,W
02AA:  IORLW  80
02AB:  SUBWF  3A,F
02AC:  BTFSC  03.0
02AD:  GOTO   2B2
02AE:  MOVLW  01
02AF:  SUBWF  3B,F
02B0:  BTFSS  03.0
02B1:  GOTO   2C1
02B2:  INCF   7A,F
02B3:  BTFSS  03.2
02B4:  GOTO   2C1
02B5:  INCF   79,F
02B6:  BTFSS  03.2
02B7:  GOTO   2C1
02B8:  INCF   78,F
02B9:  BTFSS  03.2
02BA:  GOTO   2C1
02BB:  INCF   77,F
02BC:  BTFSC  03.2
02BD:  GOTO   2CB
02BE:  RRF    78,F
02BF:  RRF    79,F
02C0:  RRF    7A,F
02C1:  MOVF   31,W
02C2:  MOVWF  3C
02C3:  MOVF   35,W
02C4:  XORWF  3C,F
02C5:  BTFSS  3C.7
02C6:  GOTO   2C9
02C7:  BSF    78.7
02C8:  GOTO   2CF
02C9:  BCF    78.7
02CA:  GOTO   2CF
02CB:  CLRF   77
02CC:  CLRF   78
02CD:  CLRF   79
02CE:  CLRF   7A
*
0320:  CLRF   78
0321:  CLRF   79
0322:  CLRF   77
0323:  CLRF   7A
0324:  MOVF   2C,W
0325:  BTFSS  03.2
0326:  GOTO   32A
0327:  MOVF   2B,W
0328:  BTFSC  03.2
0329:  GOTO   344
032A:  MOVLW  10
032B:  MOVWF  2D
032C:  BCF    03.0
032D:  RLF    29,F
032E:  RLF    2A,F
032F:  RLF    77,F
0330:  RLF    7A,F
0331:  MOVF   2C,W
0332:  SUBWF  7A,W
0333:  BTFSS  03.2
0334:  GOTO   337
0335:  MOVF   2B,W
0336:  SUBWF  77,W
0337:  BTFSS  03.0
0338:  GOTO   340
0339:  MOVF   2B,W
033A:  SUBWF  77,F
033B:  BTFSS  03.0
033C:  DECF   7A,F
033D:  MOVF   2C,W
033E:  SUBWF  7A,F
033F:  BSF    03.0
0340:  RLF    78,F
0341:  RLF    79,F
0342:  DECFSZ 2D,F
0343:  GOTO   32C
*
0389:  MOVF   0B,W
038A:  MOVWF  27
038B:  BCF    0B.7
038C:  BSF    03.5
038D:  BSF    03.6
038E:  BSF    0C.7
038F:  BSF    0C.0
0390:  NOP
0391:  NOP
0392:  BTFSC  03.0
0393:  GOTO   3BB
0394:  BCF    03.5
0395:  MOVF   0C,W
0396:  ANDLW  7F
0397:  BCF    03.6
0398:  MOVWF  28
0399:  BSF    03.6
039A:  MOVF   0D,W
039B:  BCF    03.6
039C:  MOVWF  29
039D:  BSF    03.6
039E:  MOVF   0F,W
039F:  BCF    03.6
03A0:  MOVWF  2A
03A1:  MOVF   28,W
03A2:  MOVWF  33
03A3:  CALL   35D
03A4:  MOVF   29,W
03A5:  BSF    03.6
03A6:  MOVWF  0D
03A7:  BCF    03.6
03A8:  MOVF   2A,W
03A9:  BSF    03.6
03AA:  MOVWF  0F
03AB:  BSF    03.5
03AC:  BSF    0C.7
03AD:  BSF    0C.0
03AE:  NOP
03AF:  NOP
03B0:  BCF    03.5
03B1:  BCF    03.6
03B2:  DECFSZ 26,F
03B3:  GOTO   3B5
03B4:  GOTO   3B8
03B5:  BSF    03.5
03B6:  BSF    03.6
03B7:  GOTO   3BB
03B8:  GOTO   3DA
03B9:  BSF    03.5
03BA:  BSF    03.6
03BB:  BCF    03.5
03BC:  RLF    0C,W
03BD:  RLF    0E,W
03BE:  ANDLW  7F
03BF:  BCF    03.6
03C0:  MOVWF  28
03C1:  BSF    03.6
03C2:  MOVF   0D,W
03C3:  BCF    03.6
03C4:  MOVWF  29
03C5:  BSF    03.6
03C6:  MOVF   0F,W
03C7:  BCF    03.6
03C8:  MOVWF  2A
03C9:  MOVF   28,W
03CA:  MOVWF  33
03CB:  CALL   35D
03CC:  MOVF   29,W
03CD:  BSF    03.6
03CE:  MOVWF  0D
03CF:  BCF    03.6
03D0:  MOVF   2A,W
03D1:  BSF    03.6
03D2:  MOVWF  0F
03D3:  INCF   0D,F
03D4:  BTFSC  03.2
03D5:  INCF   0F,F
03D6:  BCF    03.0
03D7:  BCF    03.6
03D8:  DECFSZ 26,F
03D9:  GOTO   38C
03DA:  BTFSC  27.7
03DB:  BSF    0B.7
03DC:  RETURN
03DD:  BTFSC  03.1
03DE:  GOTO   3E2
03DF:  MOVLW  3B
03E0:  MOVWF  04
03E1:  BCF    03.7
03E2:  CLRF   77
03E3:  CLRF   78
03E4:  CLRF   79
03E5:  CLRF   7A
03E6:  CLRF   3B
03E7:  CLRF   3C
03E8:  CLRF   3D
03E9:  CLRF   3E
03EA:  MOVF   3A,W
03EB:  IORWF  39,W
03EC:  IORWF  38,W
03ED:  IORWF  37,W
03EE:  BTFSC  03.2
03EF:  GOTO   420
03F0:  MOVLW  20
03F1:  MOVWF  3F
03F2:  BCF    03.0
03F3:  RLF    33,F
03F4:  RLF    34,F
03F5:  RLF    35,F
03F6:  RLF    36,F
03F7:  RLF    3B,F
03F8:  RLF    3C,F
03F9:  RLF    3D,F
03FA:  RLF    3E,F
03FB:  MOVF   3A,W
03FC:  SUBWF  3E,W
03FD:  BTFSS  03.2
03FE:  GOTO   409
03FF:  MOVF   39,W
0400:  SUBWF  3D,W
0401:  BTFSS  03.2
0402:  GOTO   409
0403:  MOVF   38,W
0404:  SUBWF  3C,W
0405:  BTFSS  03.2
0406:  GOTO   409
0407:  MOVF   37,W
0408:  SUBWF  3B,W
0409:  BTFSS  03.0
040A:  GOTO   41A
040B:  MOVF   37,W
040C:  SUBWF  3B,F
040D:  MOVF   38,W
040E:  BTFSS  03.0
040F:  INCFSZ 38,W
0410:  SUBWF  3C,F
0411:  MOVF   39,W
0412:  BTFSS  03.0
0413:  INCFSZ 39,W
0414:  SUBWF  3D,F
0415:  MOVF   3A,W
0416:  BTFSS  03.0
0417:  INCFSZ 3A,W
0418:  SUBWF  3E,F
0419:  BSF    03.0
041A:  RLF    77,F
041B:  RLF    78,F
041C:  RLF    79,F
041D:  RLF    7A,F
041E:  DECFSZ 3F,F
041F:  GOTO   3F2
0420:  MOVF   3B,W
0421:  MOVWF  00
0422:  INCF   04,F
0423:  MOVF   3C,W
0424:  MOVWF  00
0425:  INCF   04,F
0426:  MOVF   3D,W
0427:  MOVWF  00
0428:  INCF   04,F
0429:  MOVF   3E,W
042A:  MOVWF  00
042B:  RETURN
042C:  MOVF   04,W
042D:  MOVWF  2B
042E:  MOVF   2A,W
042F:  MOVWF  2D
0430:  BTFSC  03.2
0431:  GOTO   44B
0432:  MOVF   29,W
0433:  MOVWF  36
0434:  MOVF   28,W
0435:  MOVWF  35
0436:  MOVF   27,W
0437:  MOVWF  34
0438:  MOVF   26,W
0439:  MOVWF  33
043A:  CLRF   3A
043B:  CLRF   39
043C:  MOVLW  20
043D:  MOVWF  38
043E:  MOVLW  82
043F:  MOVWF  37
0440:  CALL   122
0441:  MOVF   7A,W
0442:  MOVWF  29
0443:  MOVF   79,W
0444:  MOVWF  28
0445:  MOVF   78,W
0446:  MOVWF  27
0447:  MOVF   77,W
0448:  MOVWF  26
0449:  DECFSZ 2D,F
044A:  GOTO   432
044B:  MOVF   29,W
044C:  MOVWF  36
044D:  MOVF   28,W
044E:  MOVWF  35
044F:  MOVF   27,W
0450:  MOVWF  34
0451:  MOVF   26,W
0452:  MOVWF  33
0453:  MOVF   33,W
0454:  SUBLW  B6
0455:  MOVWF  33
0456:  CLRF   7A
0457:  MOVF   34,W
0458:  MOVWF  37
0459:  BSF    34.7
045A:  BCF    03.0
045B:  RRF    34,F
045C:  RRF    35,F
045D:  RRF    36,F
045E:  RRF    7A,F
045F:  RRF    79,F
0460:  RRF    78,F
0461:  RRF    77,F
0462:  DECFSZ 33,F
0463:  GOTO   45A
0464:  BTFSS  37.7
0465:  GOTO   471
0466:  COMF   77,F
0467:  COMF   78,F
0468:  COMF   79,F
0469:  COMF   7A,F
046A:  INCF   77,F
046B:  BTFSC  03.2
046C:  INCF   78,F
046D:  BTFSC  03.2
046E:  INCF   79,F
046F:  BTFSC  03.2
0470:  INCF   7A,F
0471:  MOVF   7A,W
0472:  MOVWF  29
0473:  MOVF   79,W
0474:  MOVWF  28
0475:  MOVF   78,W
0476:  MOVWF  27
0477:  MOVF   77,W
0478:  MOVWF  26
0479:  BTFSS  29.7
047A:  GOTO   488
047B:  DECF   2B,F
047C:  BSF    2B.5
047D:  COMF   26,F
047E:  COMF   27,F
047F:  COMF   28,F
0480:  COMF   29,F
0481:  INCF   26,F
0482:  BTFSC  03.2
0483:  INCF   27,F
0484:  BTFSC  03.2
0485:  INCF   28,F
0486:  BTFSC  03.2
0487:  INCF   29,F
0488:  MOVLW  3B
0489:  MOVWF  32
048A:  MOVLW  9A
048B:  MOVWF  31
048C:  MOVLW  CA
048D:  MOVWF  30
048E:  CLRF   2F
048F:  MOVLW  0A
0490:  MOVWF  2D
0491:  MOVF   2A,W
0492:  BTFSC  03.2
0493:  INCF   2B,F
0494:  BSF    03.1
0495:  MOVLW  26
0496:  MOVWF  04
0497:  BCF    03.7
0498:  MOVF   29,W
0499:  MOVWF  36
049A:  MOVF   28,W
049B:  MOVWF  35
049C:  MOVF   27,W
049D:  MOVWF  34
049E:  MOVF   26,W
049F:  MOVWF  33
04A0:  MOVF   32,W
04A1:  MOVWF  3A
04A2:  MOVF   31,W
04A3:  MOVWF  39
04A4:  MOVF   30,W
04A5:  MOVWF  38
04A6:  MOVF   2F,W
04A7:  MOVWF  37
04A8:  CALL   3DD
04A9:  MOVF   78,W
04AA:  MOVF   77,F
04AB:  BTFSS  03.2
04AC:  GOTO   4C0
04AD:  INCF   2A,W
04AE:  SUBWF  2D,W
04AF:  BTFSC  03.2
04B0:  GOTO   4C0
04B1:  MOVF   2B,W
04B2:  BTFSC  03.2
04B3:  GOTO   4C2
04B4:  ANDLW  0F
04B5:  SUBWF  2D,W
04B6:  BTFSC  03.2
04B7:  GOTO   4BA
04B8:  BTFSC  03.0
04B9:  GOTO   4F2
04BA:  BTFSC  2B.7
04BB:  GOTO   4F2
04BC:  BTFSC  2B.6
04BD:  GOTO   4C2
04BE:  MOVLW  20
04BF:  GOTO   4EE
04C0:  MOVLW  20
04C1:  ANDWF  2B,F
04C2:  BTFSS  2B.5
04C3:  GOTO   4D0
04C4:  BCF    2B.5
04C5:  MOVF   2A,W
04C6:  BTFSS  03.2
04C7:  DECF   2B,F
04C8:  MOVF   77,W
04C9:  MOVWF  2B
04CA:  MOVLW  2D
04CB:  MOVWF  33
04CC:  CALL   35D
04CD:  MOVF   2B,W
04CE:  MOVWF  77
04CF:  CLRF   2B
04D0:  MOVF   2A,W
04D1:  SUBWF  2D,W
04D2:  BTFSS  03.2
04D3:  GOTO   4DE
04D4:  MOVF   77,W
04D5:  MOVWF  2B
04D6:  MOVLW  2E
04D7:  MOVWF  33
04D8:  CALL   35D
04D9:  MOVF   2B,W
04DA:  MOVWF  77
04DB:  MOVLW  20
04DC:  ANDWF  2B,F
04DD:  MOVLW  00
04DE:  MOVLW  30
04DF:  BTFSS  2B.5
04E0:  GOTO   4EE
04E1:  BCF    2B.5
04E2:  MOVF   2A,W
04E3:  BTFSS  03.2
04E4:  DECF   2B,F
04E5:  MOVF   77,W
04E6:  MOVWF  2B
04E7:  MOVLW  2D
04E8:  MOVWF  33
04E9:  CALL   35D
04EA:  MOVF   2B,W
04EB:  MOVWF  77
04EC:  CLRF   2B
04ED:  MOVLW  30
04EE:  ADDWF  77,F
04EF:  MOVF   77,W
04F0:  MOVWF  33
04F1:  CALL   35D
04F2:  BCF    03.1
04F3:  MOVF   32,W
04F4:  MOVWF  36
04F5:  MOVF   31,W
04F6:  MOVWF  35
04F7:  MOVF   30,W
04F8:  MOVWF  34
04F9:  MOVF   2F,W
04FA:  MOVWF  33
04FB:  CLRF   3A
04FC:  CLRF   39
04FD:  CLRF   38
04FE:  MOVLW  0A
04FF:  MOVWF  37
0500:  CALL   3DD
0501:  MOVF   7A,W
0502:  MOVWF  32
0503:  MOVF   79,W
0504:  MOVWF  31
0505:  MOVF   78,W
0506:  MOVWF  30
0507:  MOVF   77,W
0508:  MOVWF  2F
0509:  DECFSZ 2D,F
050A:  GOTO   494
050B:  BCF    0A.3
050C:  BCF    0A.4
050D:  GOTO   59F (RETURN)
050E:  MOVF   29,W
050F:  CLRF   78
0510:  SUBWF  28,W
0511:  BTFSC  03.0
0512:  GOTO   516
0513:  MOVF   28,W
0514:  MOVWF  77
0515:  GOTO   522
0516:  CLRF   77
0517:  MOVLW  08
0518:  MOVWF  2A
0519:  RLF    28,F
051A:  RLF    77,F
051B:  MOVF   29,W
051C:  SUBWF  77,W
051D:  BTFSC  03.0
051E:  MOVWF  77
051F:  RLF    78,F
0520:  DECFSZ 2A,F
0521:  GOTO   519
0522:  RETURN
0523:  MOVF   78,W
0524:  MOVF   26,W
0525:  MOVWF  28
0526:  MOVLW  64
0527:  MOVWF  29
0528:  CALL   50E
0529:  MOVF   77,W
052A:  MOVWF  26
052B:  MOVF   78,W
052C:  MOVLW  30
052D:  BTFSS  03.2
052E:  GOTO   536
052F:  BTFSS  27.1
0530:  GOTO   53D
0531:  BTFSC  27.3
0532:  GOTO   53D
0533:  BTFSC  27.4
0534:  MOVLW  20
0535:  GOTO   539
0536:  BCF    27.3
0537:  BCF    27.4
0538:  BSF    27.0
0539:  ADDWF  78,F
053A:  MOVF   78,W
053B:  MOVWF  33
053C:  CALL   35D
053D:  MOVF   26,W
053E:  MOVWF  28
053F:  MOVLW  0A
0540:  MOVWF  29
0541:  CALL   50E
0542:  MOVF   77,W
0543:  MOVWF  26
0544:  MOVF   78,W
0545:  MOVLW  30
0546:  BTFSS  03.2
0547:  GOTO   54E
0548:  BTFSC  27.3
0549:  GOTO   552
054A:  BTFSS  27.0
054B:  GOTO   552
054C:  BTFSC  27.4
054D:  MOVLW  20
054E:  ADDWF  78,F
054F:  MOVF   78,W
0550:  MOVWF  33
0551:  CALL   35D
0552:  MOVLW  30
0553:  ADDWF  26,F
0554:  MOVF   26,W
0555:  MOVWF  33
0556:  CALL   35D
0557:  BCF    0A.3
0558:  BCF    0A.4
0559:  GOTO   5B6 (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=10 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES PUT                      //Power Up Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=4MHz) 
*
0018:  MOVLW  34
0019:  MOVWF  04
001A:  BCF    03.7
001B:  MOVF   00,W
001C:  BTFSC  03.2
001D:  GOTO   02C
001E:  MOVLW  01
001F:  MOVWF  78
0020:  CLRF   77
0021:  DECFSZ 77,F
0022:  GOTO   021
0023:  DECFSZ 78,F
0024:  GOTO   020
0025:  MOVLW  4A
0026:  MOVWF  77
0027:  DECFSZ 77,F
0028:  GOTO   027
0029:  GOTO   02A
002A:  DECFSZ 00,F
002B:  GOTO   01E
002C:  RETURN
....................  
.................... #define LCD_ENABLE_PIN PIN_D2 
.................... #define LCD_RS_PIN PIN_D0 
.................... #define LCD_RW_PIN PIN_D1 
.................... #define LCD_DATA4 PIN_D4 
.................... #define LCD_DATA5 PIN_D5 
.................... #define LCD_DATA6 PIN_D6 
.................... #define LCD_DATA7 PIN_D7 
....................  
.................... #define TRIG_PIN PIN_C0   // Trigger pin for Ultrasonic 
.................... #define ECHO_PIN PIN_C1   // Echo pin for Ultrasonic 
....................  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
0091:  BSF    08.4
....................    output_float(LCD_DATA5); 
0092:  BSF    08.5
....................    output_float(LCD_DATA6); 
0093:  BSF    08.6
....................    output_float(LCD_DATA7); 
0094:  BSF    08.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0095:  BCF    03.5
0096:  BSF    08.1
0097:  BSF    03.5
0098:  BCF    08.1
....................    delay_cycles(1); 
0099:  NOP
....................    lcd_output_enable(1); 
009A:  BCF    03.5
009B:  BSF    08.2
009C:  BSF    03.5
009D:  BCF    08.2
....................    delay_cycles(1); 
009E:  NOP
....................    high = lcd_read_nibble(); 
009F:  BCF    03.5
00A0:  CALL   058
00A1:  MOVF   78,W
00A2:  MOVWF  3B
....................        
....................    lcd_output_enable(0); 
00A3:  BCF    08.2
00A4:  BSF    03.5
00A5:  BCF    08.2
....................    delay_cycles(1); 
00A6:  NOP
....................    lcd_output_enable(1); 
00A7:  BCF    03.5
00A8:  BSF    08.2
00A9:  BSF    03.5
00AA:  BCF    08.2
....................    delay_us(1); 
00AB:  NOP
....................    low = lcd_read_nibble(); 
00AC:  BCF    03.5
00AD:  CALL   058
00AE:  MOVF   78,W
00AF:  MOVWF  3A
....................        
....................    lcd_output_enable(0); 
00B0:  BCF    08.2
00B1:  BSF    03.5
00B2:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00B3:  BCF    08.4
....................    output_drive(LCD_DATA5); 
00B4:  BCF    08.5
....................    output_drive(LCD_DATA6); 
00B5:  BCF    08.6
....................    output_drive(LCD_DATA7); 
00B6:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00B7:  BCF    03.5
00B8:  SWAPF  3B,W
00B9:  MOVWF  77
00BA:  MOVLW  F0
00BB:  ANDWF  77,F
00BC:  MOVF   77,W
00BD:  IORWF  3A,W
00BE:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
0058:  CLRF   3C
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
0059:  BSF    03.5
005A:  BSF    08.4
005B:  MOVLW  00
005C:  BCF    03.5
005D:  BTFSC  08.4
005E:  MOVLW  01
005F:  IORWF  3C,F
....................    n |= input(LCD_DATA5) << 1; 
0060:  BSF    03.5
0061:  BSF    08.5
0062:  MOVLW  00
0063:  BCF    03.5
0064:  BTFSC  08.5
0065:  MOVLW  01
0066:  MOVWF  77
0067:  BCF    03.0
0068:  RLF    77,F
0069:  MOVF   77,W
006A:  IORWF  3C,F
....................    n |= input(LCD_DATA6) << 2; 
006B:  BSF    03.5
006C:  BSF    08.6
006D:  MOVLW  00
006E:  BCF    03.5
006F:  BTFSC  08.6
0070:  MOVLW  01
0071:  MOVWF  77
0072:  RLF    77,F
0073:  RLF    77,F
0074:  MOVLW  FC
0075:  ANDWF  77,F
0076:  MOVF   77,W
0077:  IORWF  3C,F
....................    n |= input(LCD_DATA7) << 3; 
0078:  BSF    03.5
0079:  BSF    08.7
007A:  MOVLW  00
007B:  BCF    03.5
007C:  BTFSC  08.7
007D:  MOVLW  01
007E:  MOVWF  77
007F:  RLF    77,F
0080:  RLF    77,F
0081:  RLF    77,F
0082:  MOVLW  F8
0083:  ANDWF  77,F
0084:  MOVF   77,W
0085:  IORWF  3C,F
....................     
....................    return(n); 
0086:  MOVF   3C,W
0087:  MOVWF  78
....................   #else 
0088:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
002D:  BTFSC  3B.0
002E:  GOTO   031
002F:  BCF    08.4
0030:  GOTO   032
0031:  BSF    08.4
0032:  BSF    03.5
0033:  BCF    08.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
0034:  BCF    03.5
0035:  BTFSC  3B.1
0036:  GOTO   039
0037:  BCF    08.5
0038:  GOTO   03A
0039:  BSF    08.5
003A:  BSF    03.5
003B:  BCF    08.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
003C:  BCF    03.5
003D:  BTFSC  3B.2
003E:  GOTO   041
003F:  BCF    08.6
0040:  GOTO   042
0041:  BSF    08.6
0042:  BSF    03.5
0043:  BCF    08.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
0044:  BCF    03.5
0045:  BTFSC  3B.3
0046:  GOTO   049
0047:  BCF    08.7
0048:  GOTO   04A
0049:  BSF    08.7
004A:  BSF    03.5
004B:  BCF    08.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
004C:  NOP
....................    lcd_output_enable(1); 
004D:  BCF    03.5
004E:  BSF    08.2
004F:  BSF    03.5
0050:  BCF    08.2
....................    delay_us(2); 
0051:  GOTO   052
....................    lcd_output_enable(0); 
0052:  BCF    03.5
0053:  BCF    08.2
0054:  BSF    03.5
0055:  BCF    08.2
0056:  BCF    03.5
0057:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0089:  BSF    03.5
008A:  BCF    08.2
....................    lcd_rs_tris(); 
008B:  BCF    08.0
....................    lcd_rw_tris(); 
008C:  BCF    08.1
....................   #endif 
....................  
....................    lcd_output_rs(0); 
008D:  BCF    03.5
008E:  BCF    08.0
008F:  BSF    03.5
0090:  BCF    08.0
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00BF:  MOVF   78,W
00C0:  MOVWF  3A
00C1:  BTFSS  3A.7
00C2:  GOTO   0C5
00C3:  BSF    03.5
00C4:  GOTO   091
....................    lcd_output_rs(address); 
00C5:  MOVF   38,F
00C6:  BTFSS  03.2
00C7:  GOTO   0CA
00C8:  BCF    08.0
00C9:  GOTO   0CB
00CA:  BSF    08.0
00CB:  BSF    03.5
00CC:  BCF    08.0
....................    delay_cycles(1); 
00CD:  NOP
....................    lcd_output_rw(0); 
00CE:  BCF    03.5
00CF:  BCF    08.1
00D0:  BSF    03.5
00D1:  BCF    08.1
....................    delay_cycles(1); 
00D2:  NOP
....................    lcd_output_enable(0); 
00D3:  BCF    03.5
00D4:  BCF    08.2
00D5:  BSF    03.5
00D6:  BCF    08.2
....................    lcd_send_nibble(n >> 4); 
00D7:  BCF    03.5
00D8:  SWAPF  39,W
00D9:  MOVWF  3A
00DA:  MOVLW  0F
00DB:  ANDWF  3A,F
00DC:  MOVF   3A,W
00DD:  MOVWF  3B
00DE:  CALL   02D
....................    lcd_send_nibble(n & 0xf); 
00DF:  MOVF   39,W
00E0:  ANDLW  0F
00E1:  MOVWF  3A
00E2:  MOVWF  3B
00E3:  CALL   02D
00E4:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00E5:  BSF    03.5
00E6:  BCF    08.4
....................    output_drive(LCD_DATA5); 
00E7:  BCF    08.5
....................    output_drive(LCD_DATA6); 
00E8:  BCF    08.6
....................    output_drive(LCD_DATA7); 
00E9:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
00EA:  BCF    08.2
....................    lcd_rs_tris(); 
00EB:  BCF    08.0
....................    lcd_rw_tris(); 
00EC:  BCF    08.1
....................  #endif 
....................  
....................    lcd_output_rs(0); 
00ED:  BCF    03.5
00EE:  BCF    08.0
00EF:  BSF    03.5
00F0:  BCF    08.0
....................    lcd_output_rw(0); 
00F1:  BCF    03.5
00F2:  BCF    08.1
00F3:  BSF    03.5
00F4:  BCF    08.1
....................    lcd_output_enable(0); 
00F5:  BCF    03.5
00F6:  BCF    08.2
00F7:  BSF    03.5
00F8:  BCF    08.2
....................      
....................    delay_ms(15); 
00F9:  MOVLW  0F
00FA:  BCF    03.5
00FB:  MOVWF  34
00FC:  CALL   018
....................    for(i=1;i<=3;++i) 
00FD:  MOVLW  01
00FE:  MOVWF  26
00FF:  MOVF   26,W
0100:  SUBLW  03
0101:  BTFSS  03.0
0102:  GOTO   10B
....................    { 
....................        lcd_send_nibble(3); 
0103:  MOVLW  03
0104:  MOVWF  3B
0105:  CALL   02D
....................        delay_ms(5); 
0106:  MOVLW  05
0107:  MOVWF  34
0108:  CALL   018
0109:  INCF   26,F
010A:  GOTO   0FF
....................    } 
....................     
....................    lcd_send_nibble(2); 
010B:  MOVLW  02
010C:  MOVWF  3B
010D:  CALL   02D
....................    delay_ms(5); 
010E:  MOVLW  05
010F:  MOVWF  34
0110:  CALL   018
....................    for(i=0;i<=3;++i) 
0111:  CLRF   26
0112:  MOVF   26,W
0113:  SUBLW  03
0114:  BTFSS  03.0
0115:  GOTO   11F
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0116:  MOVF   26,W
0117:  CALL   004
0118:  MOVWF  27
0119:  CLRF   38
011A:  MOVF   27,W
011B:  MOVWF  39
011C:  CALL   089
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
011D:  INCF   26,F
011E:  GOTO   112
011F:  BCF    0A.3
0120:  BCF    0A.4
0121:  GOTO   578 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
034B:  DECFSZ 35,W
034C:  GOTO   34E
034D:  GOTO   351
....................       address=LCD_LINE_TWO; 
034E:  MOVLW  40
034F:  MOVWF  36
0350:  GOTO   352
....................    else 
....................       address=0; 
0351:  CLRF   36
....................       
....................    address+=x-1; 
0352:  MOVLW  01
0353:  SUBWF  34,W
0354:  ADDWF  36,F
....................    lcd_send_byte(0,0x80|address); 
0355:  MOVF   36,W
0356:  IORLW  80
0357:  MOVWF  37
0358:  CLRF   38
0359:  MOVF   37,W
035A:  MOVWF  39
035B:  CALL   089
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
035C:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
035D:  MOVF   33,W
035E:  XORLW  07
035F:  BTFSC  03.2
0360:  GOTO   36B
0361:  XORLW  0B
0362:  BTFSC  03.2
0363:  GOTO   370
0364:  XORLW  06
0365:  BTFSC  03.2
0366:  GOTO   378
0367:  XORLW  02
0368:  BTFSC  03.2
0369:  GOTO   37E
036A:  GOTO   383
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
036B:  MOVLW  01
036C:  MOVWF  34
036D:  MOVWF  35
036E:  CALL   34B
036F:  GOTO   388
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0370:  CLRF   38
0371:  MOVLW  01
0372:  MOVWF  39
0373:  CALL   089
....................                      delay_ms(2); 
0374:  MOVLW  02
0375:  MOVWF  34
0376:  CALL   018
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0377:  GOTO   388
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0378:  MOVLW  01
0379:  MOVWF  34
037A:  MOVLW  02
037B:  MOVWF  35
037C:  CALL   34B
037D:  GOTO   388
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
037E:  CLRF   38
037F:  MOVLW  10
0380:  MOVWF  39
0381:  CALL   089
0382:  GOTO   388
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0383:  MOVLW  01
0384:  MOVWF  38
0385:  MOVF   33,W
0386:  MOVWF  39
0387:  CALL   089
....................      #endif 
....................    } 
0388:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... // Function prototypes 
.................... float get_temperature(); 
.................... unsigned int get_ultrasonic_distance(); 
....................  
.................... void main() { 
*
055A:  MOVF   03,W
055B:  ANDLW  1F
055C:  MOVWF  03
055D:  MOVLW  FF
055E:  MOVWF  20
055F:  BSF    03.5
0560:  BSF    1F.0
0561:  BSF    1F.1
0562:  BSF    1F.2
0563:  BCF    1F.3
0564:  MOVLW  07
0565:  MOVWF  1C
0566:  BCF    03.7
....................     float temperature; 
....................     unsigned int distance; 
....................      
....................     // Set up the ADC to use AN0 (for temperature sensor) 
....................     setup_adc(ADC_CLOCK_INTERNAL); 
0567:  BCF    1F.6
0568:  BCF    03.5
0569:  BSF    1F.6
056A:  BSF    1F.7
056B:  BSF    03.5
056C:  BSF    1F.7
056D:  BCF    03.5
056E:  BSF    1F.0
....................     setup_adc_ports(AN0); 
056F:  BSF    03.5
0570:  BCF    1F.0
0571:  BSF    1F.1
0572:  BSF    1F.2
0573:  BSF    1F.3
....................  
....................     // Set up Timer1 for ultrasonic measurement 
....................     setup_timer_1(T1_INTERNAL | T1_DIV_BY_1);  // Set up Timer1 with no prescaler 
0574:  MOVLW  85
0575:  BCF    03.5
0576:  MOVWF  10
....................      
....................     // Initialize the LCD 
....................     lcd_init(); 
0577:  GOTO   0E5
....................      
....................     while (TRUE) { 
....................         // Step 1: Get temperature from LM35 
....................         temperature = get_temperature(); 
0578:  GOTO   197
0579:  MOVF   7A,W
057A:  MOVWF  24
057B:  MOVF   79,W
057C:  MOVWF  23
057D:  MOVF   78,W
057E:  MOVWF  22
057F:  MOVF   77,W
0580:  MOVWF  21
....................          
....................         // Step 2: Get distance from ultrasonic sensor 
....................         distance = get_ultrasonic_distance(); 
0581:  GOTO   2E2
0582:  MOVF   78,W
0583:  MOVWF  25
....................          
....................         // Step 3: Display temperature on the LCD 
....................         lcd_gotoxy(1, 1); 
0584:  MOVLW  01
0585:  MOVWF  34
0586:  MOVWF  35
0587:  CALL   34B
....................         printf(lcd_putc, "Temp: %.1fC", temperature); 
0588:  MOVLW  0C
0589:  BSF    03.6
058A:  MOVWF  0D
058B:  MOVLW  00
058C:  MOVWF  0F
058D:  BCF    03.0
058E:  MOVLW  06
058F:  BCF    03.6
0590:  MOVWF  26
0591:  CALL   389
0592:  MOVLW  89
0593:  MOVWF  04
0594:  MOVF   24,W
0595:  MOVWF  29
0596:  MOVF   23,W
0597:  MOVWF  28
0598:  MOVF   22,W
0599:  MOVWF  27
059A:  MOVF   21,W
059B:  MOVWF  26
059C:  MOVLW  01
059D:  MOVWF  2A
059E:  GOTO   42C
059F:  MOVLW  43
05A0:  MOVWF  33
05A1:  CALL   35D
....................          
....................         // Step 4: Display distance on the LCD 
....................         lcd_gotoxy(1, 2); 
05A2:  MOVLW  01
05A3:  MOVWF  34
05A4:  MOVLW  02
05A5:  MOVWF  35
05A6:  CALL   34B
....................         printf(lcd_putc, "Dist: %ucm", distance); 
05A7:  MOVLW  12
05A8:  BSF    03.6
05A9:  MOVWF  0D
05AA:  MOVLW  00
05AB:  MOVWF  0F
05AC:  BCF    03.0
05AD:  MOVLW  06
05AE:  BCF    03.6
05AF:  MOVWF  26
05B0:  CALL   389
05B1:  MOVF   25,W
05B2:  MOVWF  26
05B3:  MOVLW  1B
05B4:  MOVWF  27
05B5:  GOTO   523
05B6:  MOVLW  63
05B7:  MOVWF  33
05B8:  CALL   35D
05B9:  MOVLW  6D
05BA:  MOVWF  33
05BB:  CALL   35D
....................          
....................         // Step 5: Delay for 1 second before updating again 
....................         delay_ms(1000); 
05BC:  MOVLW  04
05BD:  MOVWF  26
05BE:  MOVLW  FA
05BF:  MOVWF  34
05C0:  CALL   018
05C1:  DECFSZ 26,F
05C2:  GOTO   5BE
05C3:  GOTO   578
....................     } 
.................... } 
....................  
05C4:  SLEEP
.................... // Function to get temperature from LM35 sensor 
.................... float get_temperature() { 
....................     long int adc_value; 
....................     float temperature; 
....................      
....................     // Select channel 0 (AN0) for reading the temperature sensor 
....................     set_adc_channel(0); 
*
0197:  MOVLW  00
0198:  MOVWF  78
0199:  MOVF   1F,W
019A:  ANDLW  C7
019B:  IORWF  78,W
019C:  MOVWF  1F
....................     delay_us(20);  // Wait for the ADC to stabilize 
019D:  MOVLW  06
019E:  MOVWF  77
019F:  DECFSZ 77,F
01A0:  GOTO   19F
01A1:  NOP
....................     adc_value = read_adc(); 
01A2:  BSF    1F.2
01A3:  BTFSC  1F.2
01A4:  GOTO   1A3
01A5:  BSF    03.5
01A6:  MOVF   1E,W
01A7:  BCF    03.5
01A8:  MOVWF  26
01A9:  MOVF   1E,W
01AA:  MOVWF  27
....................      
....................     // Convert ADC value to temperature 
....................     temperature = (adc_value * 5.0 * 100.0) / 1024.0; 
01AB:  MOVF   27,W
01AC:  MOVWF  2D
01AD:  MOVF   26,W
01AE:  MOVWF  2C
*
01CB:  MOVF   7A,W
01CC:  MOVWF  36
01CD:  MOVF   79,W
01CE:  MOVWF  35
01CF:  MOVF   78,W
01D0:  MOVWF  34
01D1:  MOVF   77,W
01D2:  MOVWF  33
01D3:  CLRF   3A
01D4:  CLRF   39
01D5:  MOVLW  20
01D6:  MOVWF  38
01D7:  MOVLW  81
01D8:  MOVWF  37
01D9:  CALL   122
01DA:  MOVF   7A,W
01DB:  MOVWF  2F
01DC:  MOVF   79,W
01DD:  MOVWF  2E
01DE:  MOVF   78,W
01DF:  MOVWF  2D
01E0:  MOVF   77,W
01E1:  MOVWF  2C
01E2:  MOVF   2F,W
01E3:  MOVWF  36
01E4:  MOVF   2E,W
01E5:  MOVWF  35
01E6:  MOVF   2D,W
01E7:  MOVWF  34
01E8:  MOVF   2C,W
01E9:  MOVWF  33
01EA:  CLRF   3A
01EB:  CLRF   39
01EC:  MOVLW  48
01ED:  MOVWF  38
01EE:  MOVLW  85
01EF:  MOVWF  37
01F0:  CALL   122
01F1:  MOVF   7A,W
01F2:  MOVWF  2F
01F3:  MOVF   79,W
01F4:  MOVWF  2E
01F5:  MOVF   78,W
01F6:  MOVWF  2D
01F7:  MOVF   77,W
01F8:  MOVWF  2C
01F9:  MOVF   2F,W
01FA:  MOVWF  33
01FB:  MOVF   2E,W
01FC:  MOVWF  32
01FD:  MOVF   2D,W
01FE:  MOVWF  31
01FF:  MOVF   2C,W
0200:  MOVWF  30
0201:  CLRF   37
0202:  CLRF   36
0203:  CLRF   35
0204:  MOVLW  89
0205:  MOVWF  34
*
02CF:  MOVF   7A,W
02D0:  MOVWF  2B
02D1:  MOVF   79,W
02D2:  MOVWF  2A
02D3:  MOVF   78,W
02D4:  MOVWF  29
02D5:  MOVF   77,W
02D6:  MOVWF  28
....................      
....................     return temperature; 
02D7:  MOVF   28,W
02D8:  MOVWF  77
02D9:  MOVF   29,W
02DA:  MOVWF  78
02DB:  MOVF   2A,W
02DC:  MOVWF  79
02DD:  MOVF   2B,W
02DE:  MOVWF  7A
02DF:  BCF    0A.3
02E0:  BCF    0A.4
02E1:  GOTO   579 (RETURN)
.................... } 
....................  
.................... // Function to get distance from the ultrasonic sensor 
.................... unsigned int get_ultrasonic_distance() { 
02E2:  CLRF   26
....................     unsigned int distance = 0; 
....................     unsigned long duration; 
....................      
....................     // Send 10us trigger pulse to ultrasonic sensor 
....................     output_low(TRIG_PIN); 
02E3:  BCF    20.0
02E4:  MOVF   20,W
02E5:  BSF    03.5
02E6:  MOVWF  07
02E7:  BCF    03.5
02E8:  BCF    07.0
....................     delay_us(2); 
02E9:  GOTO   2EA
....................     output_high(TRIG_PIN); 
02EA:  BCF    20.0
02EB:  MOVF   20,W
02EC:  BSF    03.5
02ED:  MOVWF  07
02EE:  BCF    03.5
02EF:  BSF    07.0
....................     delay_us(10); 
02F0:  MOVLW  02
02F1:  MOVWF  77
02F2:  DECFSZ 77,F
02F3:  GOTO   2F2
02F4:  GOTO   2F5
02F5:  NOP
....................     output_low(TRIG_PIN); 
02F6:  BCF    20.0
02F7:  MOVF   20,W
02F8:  BSF    03.5
02F9:  MOVWF  07
02FA:  BCF    03.5
02FB:  BCF    07.0
....................      
....................     // Measure the time for the echo pulse 
....................     while (!input(ECHO_PIN));  // Wait for echo to go high 
02FC:  BSF    20.1
02FD:  MOVF   20,W
02FE:  BSF    03.5
02FF:  MOVWF  07
0300:  BCF    03.5
0301:  BTFSS  07.1
0302:  GOTO   2FC
....................     set_timer1(0);  // Clear the Timer1 
0303:  CLRF   0E
0304:  CLRF   0F
0305:  CLRF   0E
....................     while (input(ECHO_PIN));  // Wait for echo to go low 
0306:  BSF    20.1
0307:  MOVF   20,W
0308:  BSF    03.5
0309:  MOVWF  07
030A:  BCF    03.5
030B:  BTFSC  07.1
030C:  GOTO   306
....................     duration = get_timer1();  // Get the echo pulse duration 
030D:  MOVF   0F,W
030E:  MOVWF  7A
030F:  MOVF   0E,W
0310:  MOVWF  77
0311:  MOVF   0F,W
0312:  SUBWF  7A,W
0313:  BTFSS  03.2
0314:  GOTO   30D
0315:  MOVF   77,W
0316:  MOVWF  27
0317:  MOVF   7A,W
0318:  MOVWF  28
....................      
....................     // Calculate distance in cm (Speed of sound = 343m/s) 
....................     // Time duration is in microseconds, so distance (cm) = (duration / 58) 
....................     distance = duration / 58; 
0319:  MOVF   28,W
031A:  MOVWF  2A
031B:  MOVF   27,W
031C:  MOVWF  29
031D:  CLRF   2C
031E:  MOVLW  3A
031F:  MOVWF  2B
*
0344:  MOVF   78,W
0345:  MOVWF  26
....................      
....................     return distance; 
0346:  MOVF   26,W
0347:  MOVWF  78
0348:  BCF    0A.3
0349:  BCF    0A.4
034A:  GOTO   582 (RETURN)
.................... } 
....................  

Configuration Fuses:
   Word  1: 3F31   XT NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
